#!/usr/bin/env bash

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "$tmpFile" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "$tmpFile" 2> /dev/null; # macOS `stat`
		stat -c"%s" "$tmpFile" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"$cmd" -v "$tmpFile" || return 1;
	[ -f "$tmpFile" ] && rm "$tmpFile";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du "$arg" -- "$@";
	else
		du "$arg" .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ "${1}" = "" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "$domain" 2>&1);

	if [[ "$tmp" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "$tmp" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "$certText" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "$certText" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! "$(uname -s)" = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# flutter run and watch
flutter_watch() {
  tmux new -s fw \; \
    send-keys 'fvm flutter run $1 $2 $3 $4 --pid-file=/tmp/tf1.pid' C-m \; \
    split-window -v \; \
    send-keys 'npx -y nodemon -e dart -x "cat /tmp/tf1.pid | xargs kill -s USR1"' C-m \; \
    resize-pane -y 4 -t 1 \; \
    select-pane -t 0 \;
}

flutter_okmc_watch() {
  tmux new -s fw \; \
    send-keys 'fvm flutter run -d chrome --web-port 49307 $1 $2 $3 $4 --pid-file=/tmp/tf1.pid' C-m \; \
    split-window -v \; \
    send-keys 'npx -y nodemon -e dart -x "cat /tmp/tf1.pid | xargs kill -s USR1"' C-m \; \
    resize-pane -y 4 -t 1 \; \
    select-pane -t 0 \;
}

# flutter run and watch
flutter_profile_watch() {
  tmux new -s fw \; \
    send-keys 'flutter run --profile $1 $2 $3 $4 --pid-file=/tmp/tf1.pid' C-m \; \
    split-window -v \; \
    send-keys 'npx -y nodemon -e dart -x "cat /tmp/tf1.pid | xargs kill -s USR1"' C-m \; \
    resize-pane -y 4 -t 1 \; \
    select-pane -t 0 \;
}

# kill flutter watch
flutter_kill_watch () {
  tmux kill-session -t fw
}

install_flutter() {
    if [ "$1" = "" ]; then
        echo "用法: install_flutter <版本>"
        return 1
    fi

    local VERSION="$1"
    local DIR="$HOME/development/flutter/$VERSION"
    local PACKAGE_NAME="flutter_macos_arm64_$VERSION-stable.zip"

    # 如果目录不存在，则创建目录
    mkdir -p "$DIR"

    # 下载 Flutter SDK
    local FLUTTER_URL="https://storage.flutter-io.cn/flutter_infra_release/releases/stable/macos/$PACKAGE_NAME"

    echo "下载 Flutter 版本 $VERSION..."
    curl -LO "$FLUTTER_URL"

    echo "解压 Flutter..."
    unzip "$PACKAGE_NAME" -d "$DIR"

    # 将 Flutter 二进制文件添加到系统 PATH
    cat <<EOT >> ~/dotfiles/.zshenv
export PATH="\$PATH":"\$HOME/.pub-cache/bin"
export PUB_HOSTED_URL="https://pub.flutter-io.cn"
export FLUTTER_STORAGE_BASE_URL="https://storage.flutter-io.cn"
export PATH="$DIR/flutter/bin:\$PATH"
EOT

    # 更新 shell 配置
    source "$HOME/.zshenv"
    rm "$PACKAGE_NAME"

    # 运行 Flutter doctor 检查依赖关系
    flutter doctor
}

# 检查文件是否存
checkfile() {
  if test -e "$1"; then
    echo "File exists: $1"
  else
    echo "File does not exist or you do not have permission to access it: $1"
  fi
}
